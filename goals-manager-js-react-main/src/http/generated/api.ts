/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Goals Manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
export type UpdateGoal404 = {
  message: string;
};

export type UpdateGoal200UpdatedGoal = {
  createdAt: string;
  desiredWeeklyFrequency: number;
  id: string;
  title: string;
};

export type UpdateGoal200 = {
  error?: string;
  success: boolean;
  updatedGoal?: UpdateGoal200UpdatedGoal;
};

export type UpdateGoalBody = {
  /**
   * @minimum 1
   * @maximum 7
   */
  desiredWeeklyFrequency?: number;
  title?: string;
};

export type GetProfile200Profile = {
  avatarUrl: string;
  /** @nullable */
  email: string | null;
  id: string;
  /** @nullable */
  name: string | null;
};

export type GetProfile200 = {
  profile: GetProfile200Profile;
};

export type AuthenticateFromGithub201 = {
  token: string;
};

export type AuthenticateFromGithubBody = {
  code: string;
};

export type DeleteGoal404 = {
  message: string;
};

/**
 * @nullable
 */
export type DeleteGoal200 = typeof DeleteGoal200[keyof typeof DeleteGoal200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteGoal200 = {
  null: 'null',
} as const;

export type GetPendingGoals200PendingGoalsItem = {
  completionCount: number;
  desiredWeeklyFrequency: number;
  id: string;
  title: string;
};

export type GetPendingGoals200 = {
  pendingGoals: GetPendingGoals200PendingGoalsItem[];
};

export type GetWeekSummaryParams = {
weekStartsAt?: string;
};

export type CreateGoalCompletionBody = {
  goalId: string;
};

/**
 * @nullable
 */
export type CreateGoal201 = typeof CreateGoal201[keyof typeof CreateGoal201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateGoal201 = {
  null: 'null',
} as const;

export type CreateGoalBody = {
  /**
   * @minimum 1
   * @maximum 7
   */
  desiredWeeklyFrequency: number;
  title: string;
};





/**
 * Create a goal
 */
export type createGoalResponse = {
  data: CreateGoal201;
  status: number;
}

export const getCreateGoalUrl = () => {


  return `http://localhost:3333/goals`
}

export const createGoal = async (createGoalBody: CreateGoalBody, options?: RequestInit): Promise<createGoalResponse> => {
  
  const res = await fetch(getCreateGoalUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createGoalBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getCreateGoalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGoal>>, TError,{data: CreateGoalBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof createGoal>>, TError,{data: CreateGoalBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGoal>>, {data: CreateGoalBody}> = (props) => {
          const {data} = props ?? {};

          return  createGoal(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateGoalMutationResult = NonNullable<Awaited<ReturnType<typeof createGoal>>>
    export type CreateGoalMutationBody = CreateGoalBody
    export type CreateGoalMutationError = unknown

    export const useCreateGoal = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGoal>>, TError,{data: CreateGoalBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof createGoal>>,
        TError,
        {data: CreateGoalBody},
        TContext
      > => {

      const mutationOptions = getCreateGoalMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * complete a Goal
 */
export type createGoalCompletionResponse = {
  data: void;
  status: number;
}

export const getCreateGoalCompletionUrl = () => {


  return `http://localhost:3333/completions`
}

export const createGoalCompletion = async (createGoalCompletionBody: CreateGoalCompletionBody, options?: RequestInit): Promise<createGoalCompletionResponse> => {
  
  const res = await fetch(getCreateGoalCompletionUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createGoalCompletionBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getCreateGoalCompletionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGoalCompletion>>, TError,{data: CreateGoalCompletionBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof createGoalCompletion>>, TError,{data: CreateGoalCompletionBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGoalCompletion>>, {data: CreateGoalCompletionBody}> = (props) => {
          const {data} = props ?? {};

          return  createGoalCompletion(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateGoalCompletionMutationResult = NonNullable<Awaited<ReturnType<typeof createGoalCompletion>>>
    export type CreateGoalCompletionMutationBody = CreateGoalCompletionBody
    export type CreateGoalCompletionMutationError = unknown

    export const useCreateGoalCompletion = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGoalCompletion>>, TError,{data: CreateGoalCompletionBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof createGoalCompletion>>,
        TError,
        {data: CreateGoalCompletionBody},
        TContext
      > => {

      const mutationOptions = getCreateGoalCompletionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Get week summary
 */
export type getWeekSummaryResponse = {
  data: void;
  status: number;
}

export const getGetWeekSummaryUrl = (params?: GetWeekSummaryParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/summary?${normalizedParams.toString()}` : `http://localhost:3333/summary`
}

export const getWeekSummary = async (params?: GetWeekSummaryParams, options?: RequestInit): Promise<getWeekSummaryResponse> => {
  
  const res = await fetch(getGetWeekSummaryUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getGetWeekSummaryQueryKey = (params?: GetWeekSummaryParams,) => {
    return [`http://localhost:3333/summary`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWeekSummaryQueryOptions = <TData = Awaited<ReturnType<typeof getWeekSummary>>, TError = unknown>(params?: GetWeekSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeekSummary>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWeekSummaryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeekSummary>>> = ({ signal }) => getWeekSummary(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWeekSummary>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWeekSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof getWeekSummary>>>
export type GetWeekSummaryQueryError = unknown


export function useGetWeekSummary<TData = Awaited<ReturnType<typeof getWeekSummary>>, TError = unknown>(
 params: undefined |  GetWeekSummaryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeekSummary>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWeekSummary>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetWeekSummary<TData = Awaited<ReturnType<typeof getWeekSummary>>, TError = unknown>(
 params?: GetWeekSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeekSummary>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWeekSummary>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetWeekSummary<TData = Awaited<ReturnType<typeof getWeekSummary>>, TError = unknown>(
 params?: GetWeekSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeekSummary>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetWeekSummary<TData = Awaited<ReturnType<typeof getWeekSummary>>, TError = unknown>(
 params?: GetWeekSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeekSummary>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWeekSummaryQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get pending goals
 */
export type getPendingGoalsResponse = {
  data: GetPendingGoals200;
  status: number;
}

export const getGetPendingGoalsUrl = () => {


  return `http://localhost:3333/pending-goals`
}

export const getPendingGoals = async ( options?: RequestInit): Promise<getPendingGoalsResponse> => {
  
  const res = await fetch(getGetPendingGoalsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getGetPendingGoalsQueryKey = () => {
    return [`http://localhost:3333/pending-goals`] as const;
    }

    
export const getGetPendingGoalsQueryOptions = <TData = Awaited<ReturnType<typeof getPendingGoals>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPendingGoals>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPendingGoalsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPendingGoals>>> = ({ signal }) => getPendingGoals({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPendingGoals>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPendingGoalsQueryResult = NonNullable<Awaited<ReturnType<typeof getPendingGoals>>>
export type GetPendingGoalsQueryError = unknown


export function useGetPendingGoals<TData = Awaited<ReturnType<typeof getPendingGoals>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPendingGoals>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPendingGoals>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetPendingGoals<TData = Awaited<ReturnType<typeof getPendingGoals>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPendingGoals>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPendingGoals>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetPendingGoals<TData = Awaited<ReturnType<typeof getPendingGoals>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPendingGoals>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetPendingGoals<TData = Awaited<ReturnType<typeof getPendingGoals>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPendingGoals>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPendingGoalsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Daily Chart
 */
export type getDailyGoalsChartResponse = {
  data: void;
  status: number;
}

export const getGetDailyGoalsChartUrl = () => {


  return `http://localhost:3333/daily-goals-chart`
}

export const getDailyGoalsChart = async ( options?: RequestInit): Promise<getDailyGoalsChartResponse> => {
  
  const res = await fetch(getGetDailyGoalsChartUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getGetDailyGoalsChartQueryKey = () => {
    return [`http://localhost:3333/daily-goals-chart`] as const;
    }

    
export const getGetDailyGoalsChartQueryOptions = <TData = Awaited<ReturnType<typeof getDailyGoalsChart>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyGoalsChart>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDailyGoalsChartQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyGoalsChart>>> = ({ signal }) => getDailyGoalsChart({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDailyGoalsChart>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDailyGoalsChartQueryResult = NonNullable<Awaited<ReturnType<typeof getDailyGoalsChart>>>
export type GetDailyGoalsChartQueryError = unknown


export function useGetDailyGoalsChart<TData = Awaited<ReturnType<typeof getDailyGoalsChart>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyGoalsChart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDailyGoalsChart>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetDailyGoalsChart<TData = Awaited<ReturnType<typeof getDailyGoalsChart>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyGoalsChart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDailyGoalsChart>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetDailyGoalsChart<TData = Awaited<ReturnType<typeof getDailyGoalsChart>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyGoalsChart>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetDailyGoalsChart<TData = Awaited<ReturnType<typeof getDailyGoalsChart>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyGoalsChart>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDailyGoalsChartQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Delete a goal by its ID
 */
export type deleteGoalResponse = {
  data: DeleteGoal200;
  status: number;
}

export const getDeleteGoalUrl = (goalId: string,) => {


  return `http://localhost:3333/delete/${goalId}`
}

export const deleteGoal = async (goalId: string, options?: RequestInit): Promise<deleteGoalResponse> => {
  
  const res = await fetch(getDeleteGoalUrl(goalId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getDeleteGoalMutationOptions = <TError = DeleteGoal404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGoal>>, TError,{goalId: string}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deleteGoal>>, TError,{goalId: string}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteGoal>>, {goalId: string}> = (props) => {
          const {goalId} = props ?? {};

          return  deleteGoal(goalId,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteGoalMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGoal>>>
    
    export type DeleteGoalMutationError = DeleteGoal404

    export const useDeleteGoal = <TError = DeleteGoal404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGoal>>, TError,{goalId: string}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteGoal>>,
        TError,
        {goalId: string},
        TContext
      > => {

      const mutationOptions = getDeleteGoalMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Authenticate user from Github code
 */
export type authenticateFromGithubResponse = {
  data: AuthenticateFromGithub201;
  status: number;
}

export const getAuthenticateFromGithubUrl = () => {


  return `http://localhost:3333/auth/github`
}

export const authenticateFromGithub = async (authenticateFromGithubBody: AuthenticateFromGithubBody, options?: RequestInit): Promise<authenticateFromGithubResponse> => {
  
  const res = await fetch(getAuthenticateFromGithubUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      authenticateFromGithubBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getAuthenticateFromGithubMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateFromGithub>>, TError,{data: AuthenticateFromGithubBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof authenticateFromGithub>>, TError,{data: AuthenticateFromGithubBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authenticateFromGithub>>, {data: AuthenticateFromGithubBody}> = (props) => {
          const {data} = props ?? {};

          return  authenticateFromGithub(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthenticateFromGithubMutationResult = NonNullable<Awaited<ReturnType<typeof authenticateFromGithub>>>
    export type AuthenticateFromGithubMutationBody = AuthenticateFromGithubBody
    export type AuthenticateFromGithubMutationError = unknown

    export const useAuthenticateFromGithub = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateFromGithub>>, TError,{data: AuthenticateFromGithubBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof authenticateFromGithub>>,
        TError,
        {data: AuthenticateFromGithubBody},
        TContext
      > => {

      const mutationOptions = getAuthenticateFromGithubMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Get authenticated user profile
 */
export type getProfileResponse = {
  data: GetProfile200;
  status: number;
}

export const getGetProfileUrl = () => {


  return `http://localhost:3333/profile`
}

export const getProfile = async ( options?: RequestInit): Promise<getProfileResponse> => {
  
  const res = await fetch(getGetProfileUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getGetProfileQueryKey = () => {
    return [`http://localhost:3333/profile`] as const;
    }

    
export const getGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof getProfile>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfile>>> = ({ signal }) => getProfile({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getProfile>>>
export type GetProfileQueryError = unknown


export function useGetProfile<TData = Awaited<ReturnType<typeof getProfile>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfile>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProfile<TData = Awaited<ReturnType<typeof getProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfile>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProfile<TData = Awaited<ReturnType<typeof getProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetProfile<TData = Awaited<ReturnType<typeof getProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update a goal
 */
export type updateGoalResponse = {
  data: UpdateGoal200;
  status: number;
}

export const getUpdateGoalUrl = (goalId: string,) => {


  return `http://localhost:3333/update/${goalId}`
}

export const updateGoal = async (goalId: string,
    updateGoalBody: UpdateGoalBody, options?: RequestInit): Promise<updateGoalResponse> => {
  
  const res = await fetch(getUpdateGoalUrl(goalId),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateGoalBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getUpdateGoalMutationOptions = <TError = UpdateGoal404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGoal>>, TError,{goalId: string;data: UpdateGoalBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof updateGoal>>, TError,{goalId: string;data: UpdateGoalBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateGoal>>, {goalId: string;data: UpdateGoalBody}> = (props) => {
          const {goalId,data} = props ?? {};

          return  updateGoal(goalId,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateGoalMutationResult = NonNullable<Awaited<ReturnType<typeof updateGoal>>>
    export type UpdateGoalMutationBody = UpdateGoalBody
    export type UpdateGoalMutationError = UpdateGoal404

    export const useUpdateGoal = <TError = UpdateGoal404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGoal>>, TError,{goalId: string;data: UpdateGoalBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof updateGoal>>,
        TError,
        {goalId: string;data: UpdateGoalBody},
        TContext
      > => {

      const mutationOptions = getUpdateGoalMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
